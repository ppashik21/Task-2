1. Установить Jenkins. Это может быть установка на ваш локальный компьютер или на инстансе в облаке, это не имеет значение, 
как не имеет значение и метод уставки (с использованием docker контейнера, playbook или установка вручную из репзитория и пр.).    

curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins

2. Создать новый проект “Staging”, в нем добавить задачу для сборки простого приложения.
Замечания:
o Вы можете использовать любое привычное приложение на любом языке 
(.net, java, js, python, php). 
o Код приложения должен быть размещен в вашем собственном git-репозитории. 
o Должна использоваться ветка“staging”.
o Приложение может быть собрано в контейнере(предпочтительный 
способ).
o Задача по сборке должна запускаться с параметрами.
o Результатом сборки обязательно должен быть артифакт(архив, 
docker-контейнер), который вы дальше будете использовать.    
o Необходимо самостоятельно подумать над тем,каким образом Jenkins/TeamCity получит доступ к git-репозиторию, 
при этом необходимо придумать наиболее безопасный на ваш вгляд способ. 

Доступ к git-репозиторию осуществлял через "Credentials" по SSH.

https://github.com/ppashik21/test_py

3. Создать задачу в Jenkins для деплоя вашего артифакта на сервер и перезапуск приложения.
Замечания: 
o Здесь артефакт может доставляться на удаленный сервер(например,на EC2 инстанс в AWS), либо на контейнер (при работе локально в Docker), 
либо на локальный сервер (при работе с Vagrant/VirtualBox). 
o Необходимо самостоятельно подумать над тем,каким образом будет организован доступ из Jenkins/Teamcity на сервер (дря загрузки артефактов), 
при этом необходимо придумать наиболее безопасный на ваш вгляд способ. 

Настроить зависимость задачи деплоя от задачи сборки. 
Настроить деплой артифакта в место где он будет работать и запуск приложения. 
Добавить задачу создания бэкапа артефактов на сервере. 
Настроить пайплайн, где должны быть включены шаги: сборка, бэкап и деплой (опционально: тестирование). 
Настроить автоматический запуск деплоя при добавлении нового commit’а в ветке “staging” git. 
* При запуске локально – здесь могут быть проблемы с настройкой webhook, потому используйте другой метод взаимодействия с git. 
Создать новый проект “Production”, добавить задачу для сборки приложения, выполнить те же настройки, что и в Staging (п. 2), 
но с небольшими изменениями: должна использоваться ветка “master”. 
Создать задачу для деплоя Production артефактов на сервер (здесь может использоваться тот же сервер, 
но приложения должны быть различными: «висеть» на разных портах или под разными доменами). 
Настроить зависимость задачи деплоя от задачи сборки. 
Настроить автоматический запуск деплоя при подтверждении pull request’а в ветке “master” в git. 

https://github.com/ppashik21/test_py
